Shortcuts
	->cw
	->ctor
	->prop
	->svm

Class members:
	-> Instance Members - which are accessible from
	an object.
		-> var person = new Person()
		person.method();

	-> Static members - which are accessible from
	the class
		-> Console.WriteLine();
		-> Class.Method();
		-> for singleton concepts
		->eg. we only have one console
		->dateTime();
		-> static keyword


Constructors:
	-> C# auto creates a default constructor if not
	create. In IL
	->"this" - references the current object
	->ctor - constructor shortcut
	-> Can have multiple constructors with different
	signatures (Constructor overloading).
		->makes initialisation easier depending on the 
		known parameters
	->only use constructors when you really need early
	initialisation

Object Initialiser
	-> to quickly initialise an object without the need of
	calling one of its constructors.
	->		var person = new Person()
				{
					FirstName = "waseem",
					LastName = "ahmed"
				};
	-> default constructor will be used


Methods
	-> can have method overloads = method with same 
	signature but different signatures
	->Method with varying number of params
		->Eg calculator Add method
		public class Calculator
		{
			public int Add (params int[] numbers){}
		}
		var result = calculator.Add(new int[] {1,2,3,4});
		OR var result = calculator.Add(1,2,3,4); -when
		params modifier is added to the signature of the
		Add method

	-> ref modifier
	works with value types
	include ref modifier to the method signature

	->out modifier
		-> can return a value to the caller
		public class MyClass
		{
			public void MyMethod(out int result)
			{
				result = 1;
			}
		}
		int a;
		myClass.MyMethod(out a);

Fields:
	-> variable on class level
	-> readonly fields - so it is only assigned once

Access Modifiers
	-public
	-private
	-protected
	-internal
	-protected internal
	
	encapsulation - info hiding
		-> roles
		-> in practice
			- define fields as private
			- provide getter/setter methods as public so u can access fields
			public class Person
			{
				private string Name; - now when creating an instance we wont have access to Name fields therefore use getters and setters

				public void SetName(string name)
				{
					if (!String.IsNullOrEmpty(name))
						this.Name = name;
				}

				public string GetName()
				{
					return Name;
				}
			}
		-> objects should hide their implementation details
		and rather show what they can do.

Properties:
	->to create a getter setter with less code
	-> recap to understand IL code

Indexers:
	->HttpCookie()
	->cookie["name"] = "X"; - instance
	public string this[string key]
	{
		get{...}
		set{...}
	}

Section3
Class Coupling:
	-> measure of how interconnected classes are.
	-> loosely couple is ideal
	-> how ?
		->Encapsulation
		->relationship between classes
			->inheritance
			->composition
		->interfaces
	
Inheritance:
		->is-A (A car is a vehicle)
		->base/parent -> child
